# 내 Flask 채팅 애플리케이션에 디버깅용 '치트 코드' 기능을 추가하고 싶어.
# 사용자가 채팅창에 `/setturn N` (N은 숫자) 형식으로 입력하면, 대화 상태를 N번째 턴으로 설정하는 기능이야.

# === 1. 프론트엔드 JavaScript 수정 (`index.html` 내 `<script>` 또는 `static/script.js`) ===

# 사용자가 메시지를 전송하는 로직 (아마도 'send-button'의 클릭 이벤트 리스너 또는 Enter 키 처리 함수 내부)을 다음과 같이 수정해줘:

# a. 사용자가 입력한 메시지 (`userInput.value.trim()`)를 가져온 후, 이 메시지가 치트 코드 형식 (`/setturn`으로 시작하고 뒤에 숫자가 오는 형태)인지 정규표현식으로 확인해줘.
#    예시 정규표현식: `const cheatCodeMatch = userMessage.match(/^\/setturn\s+(\d+)$/);`

# b. 만약 `cheatCodeMatch`가 존재한다면 (즉, 치트 코드라면):
#    i.  입력된 숫자(턴 번호)를 추출해줘 (`parseInt(cheatCodeMatch[1], 10)`).
#    ii. 채팅 입력창(`userInput`)의 내용을 비워줘.
#    iii. 백엔드의 `/send_message` 경로로 **POST 요청**을 보내되, 요청 본문(body)에 다음과 같은 특별한 JSON 객체를 포함시켜줘:
#        ```json
#        {
#            "cheat_command": "set_turn",
#            "target_turn": 추출한_턴_번호
#        }
#        ```
#    iv. 백엔드로부터 응답이 오면, 현재 채팅창 내용(`chat-box`)을 비우고, 응답 데이터에 포함된 `reply` (예: "턴이 설정되었습니다.")와 `current_turn`, `max_turns`를 사용하여 턴 표시기(`turn-indicator`)를 업데이트하고, `stress_score`도 업데이트 해줘. 입력창도 다시 활성화시켜줘.
#    v.  치트 코드 자체는 채팅창에 "나: /setturn N" 형태로 표시되지 않도록 해줘.

# c. 만약 치트 코드가 아니라면 (기존 일반 메시지라면):
#    - 기존처럼 사용자 메시지를 채팅창에 표시하고, 입력창을 비우고, `{ "message": userMessage }` 형식으로 백엔드에 POST 요청을 보내는 로직을 그대로 수행해줘.

# === 2. 백엔드 코드 수정 (`main.py` 또는 `app.py`의 `handle_message` 함수) ===

# `/send_message` 라우트의 `handle_message` 함수 시작 부분을 수정해서 치트 코드 요청을 먼저 처리하도록 해줘:

# a. `request.json`으로부터 데이터를 가져온 후, `data.get('cheat_command')` 와 `data.get('target_turn')`을 확인해줘.

# b. 만약 `cheat_command`가 `"set_turn"` 이고 `target_turn` 값이 존재한다면:
#    i.  `target_turn`을 정수형으로 변환해줘. (1 미만일 경우 1로 설정)
#    ii. Flask 세션 변수들을 초기화하거나 조정해줘:
#        - `session['turn_count']`를 `target_turn - 1`로 설정해줘. (다음 요청에서 1 증가되어 target_turn이 되도록)
#        - `session['user_messages']`를 빈 리스트 `[]`로 설정해줘. (점수 계산용 기록 초기화)
#        - `session['chat_history']`를 빈 리스트 `[]`로 설정해줘. (AI API 전달용 기록 초기화)
#    iii.디버깅용으로 "CHEAT: Turn set to effectively start at {target_turn}." 같은 로그를 출력해줘.
#    iv. 프론트엔드에 반환할 JSON 응답을 구성해줘. 이 응답에는 다음을 포함해줘:
#        - `reply`: "대화 상태가 {target_turn}번째 턴으로 설정되었습니다. 다음 메시지를 입력해주세요." 같은 안내 메시지.
#        - `stress_score`: `calculate_stress_score([])`를 호출하여 초기화된 점수 (보통 5점).
#        - `conversation_end`: `(target_turn >= 20)` 와 같이 최대 턴 수(20)와 비교하여 설정.
#        - `current_turn`: `target_turn` 값.
#        - `max_turns`: 20 (또는 설정된 최대 턴 수).
#    v.  이 JSON 응답을 `jsonify`로 반환하고 함수를 종료해줘.

# c. 만약 치트 명령이 아니라면 (즉, `cheat_command`가 없거나 다른 값이면):
#    - 기존의 일반 메시지 처리 로직 (사용자 메시지 추출, 턴 카운터 증가 및 저장, 사용자 메시지 기록 저장, AI API 호출 및 기록 저장, 스트레스 점수 계산, 최종 JSON 응답 반환 등)을 그대로 수행하도록 해줘.
#    - (주의) 일반 메시지 처리 시 `user_message = data.get('message')`가 `None`이 아닌지 확인하는 로직이 필요할 수 있어.

# **핵심:**
# - 프론트엔드는 치트 코드 감지 및 특별 요청 전송 담당.
# - 백엔드는 특별 요청 수신 시 세션 상태 변경 및 확인 응답 전송 담당.
# - 세션 변수(`turn_count`, `user_messages`, `chat_history`)를 정확히 초기화/설정하는 것이 중요해.