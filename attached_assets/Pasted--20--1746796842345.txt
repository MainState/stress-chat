# 내 졸업 작품 프로젝트의 사용자 인터페이스를 개선하려고 해.
# 현재는 대화가 끝나면 기존 채팅 화면에서 입력만 비활성화되는데,
# 대신 20턴의 대화가 끝나면 화면 전체가 '결과 표시 화면'으로 전환되도록 하고 싶어.

# 대상 파일: `templates/index.html`과 이 파일 내의 `<script>` 태그 또는 연결된 `static/script.js` 파일

# === 1. HTML 구조 변경 (`templates/index.html` 파일) ===

# a. 기존 채팅 관련 요소들을 하나의 `div`로 묶어줘. 이 `div`의 ID는 `chat-section`으로 해줘.
#    (이 안에는 `chat-box`, `user-input`, `send-button`, `score-display` 등이 포함될 거야)

# b. `chat-section` div와는 별개로, **새로운 `div`를 하나 더 만들어줘.** 이 `div`의 ID는 `results-section`으로 하고, 초기에는 보이지 않도록 `style="display: none;"` 속성을 추가해줘.

# c. 이 새로운 `results-section` div 안에는 다음 요소들을 포함해줘:
#    i.  "최종 스트레스 점수" 같은 제목을 표시할 `<h1>` 또는 `<h2>` 태그.
#    ii. 실제 점수를 크게 표시할 요소. 예를 들어 `<p id="final-score-value" style="font-size: 3em; font-weight: bold;"></p>` 와 같이 만들어줘.
#    iii. 점수에 대한 간단한 설명이나 주의 문구(Disclaimer)를 표시할 `<p>` 태그 (예: "본 점수는 참고용이며 의학적 진단을 대체할 수 없습니다.").
#    iv. "다시 시작하기" 버튼. ID는 `try-again-button`으로 하고, 텍스트는 "처음부터 다시 시작하기"로 해줘. (`<button id="try-again-button">처음부터 다시 시작하기</button>`)

# === 2. JavaScript 로직 수정 (HTML 파일 내 `<script>` 태그 또는 `static/script.js` 파일) ===

# `Workspace` API 호출 후 응답(data)을 처리하는 `.then(data => { ... })` 블록 내부를 다음과 같이 수정/보강해줘:

# a. 파일 상단(또는 적절한 위치)에서 새로 만든 HTML 섹션들에 대한 참조 변수를 만들어줘:
#    `const chatSection = document.getElementById('chat-section');`
#    `const resultsSection = document.getElementById('results-section');`
#    `const finalScoreValueElement = document.getElementById('final-score-value');`
#    `const tryAgainButton = document.getElementById('try-again-button');`

# b. `if (data.conversation_end === true)` 조건문 블록 안의 내용을 다음 로직으로 **대체하거나 수정**해줘:
#    i.  `chatSection.style.display = 'none';` // 기존 채팅 섹션 숨기기
#    ii. `resultsSection.style.display = 'block';` // 결과 섹션 보여주기
#    iii. `finalScoreValueElement.textContent = data.stress_score + "점";` // 결과 섹션에 최종 점수 표시
#    iv. (기존에 채팅창에 마지막 메시지를 추가하던 로직은 이 if 블록 안에서는 제거해도 될 것 같아. 아니면 결과 섹션에 요약 메시지를 표시할 수도 있음.)

# c. `else` 블록 (즉, `data.conversation_end === false` 일 때, 대화가 계속 진행 중인 경우):
#    i.  `chatSection.style.display = 'block';` // 채팅 섹션 보여주기 (혹시 숨겨져 있었다면)
#    ii. `resultsSection.style.display = 'none';` // 결과 섹션 숨기기
#    iii. (기존처럼 챗봇 응답을 `chat-box`에 표시하고, 현재 `score-display`에 점수를 업데이트하는 로직은 여기에 있어야 해.)
#    iv. 사용자 입력창과 버튼이 활성화되어 있도록 해줘 (`disabled = false`).

# d. 새로 추가한 `tryAgainButton`에 'click' 이벤트 리스너를 추가해줘. 클릭 시 다음 작업 수행:
#    i.  (가장 간단한 방법) 페이지를 새로고침해서 초기 상태로 돌아가게 해줘: `window.location.reload();`
#    ii. (조금 더 고급 방법 - AI에게는 위 새로고침 방법으로 요청하는 것이 간단)
#        - `resultsSection.style.display = 'none';`
#        - `chatSection.style.display = 'block';`
#        - 채팅 입력창(`user-input`) 및 전송 버튼(`send-button`) 활성화 (`disabled = false`).
#        - 채팅창 내용(`chat-box`) 비우기.
#        - (중요) 백엔드 세션(턴 카운트, 대화 기록)도 초기화해야 하므로, 이 버튼 클릭 시 백엔드에 '/reset_chat' 같은 초기화 요청을 보내는 것이 이상적이지만, 우선은 페이지 새로고침으로 구현해달라고 해도 괜찮아.

# **주의사항:**
# - HTML 요소의 ID가 JavaScript 코드와 정확히 일치하도록 해줘.
# - 기존의 다른 JavaScript 로직(예: 사용자 메시지 채팅창에 추가, 입력창 비우기 등)은 `data.conversation_end === false`인 경우에 계속 잘 작동해야 해.